%PSOGSA source code v3.0, Generated by SeyedAli Mirjalili, 2011. 
%Adopted from: S. Mirjalili, S.Z. Mohd Hashim, “A New Hybrid PSOGSA 
%Algorithm for Function Optimization, in IEEE International Conference 
%on Computer and Information Application?ICCIA 2010), China, 2010, pp. 374-377.


                              %-------------------------------------------%
                              %         Evaluate the population           %           
                              %-------------------------------------------%                                 %--%
 %%% Variables %%%

%current_position:  Position of particles
%velocity:          Velocity
%force:             The gravitational force between the particles
%acceleration:      Acceleration
%mass:              Mass 
%dim:               Dimension of test functions
%n:                 Number of particles
%G0                 Gravitational constant
%low:               The lower bound of the search space
%up:                The higher bound of the search space


function [gBestScore,gBest,GlobalBestCost]=PSOGSA(Benchmark_Function_ID,n,iteration,X,Y)

[low,up,dim]=benchmark_functions_details(Benchmark_Function_ID);%define the boundary and dimension of the benchmark function

current_fitness =zeros(n,1);
gBest=zeros(1,dim);
gBestScore=inf;

for i=1:n
        pBestScore(i)=inf;
end
        pBest=zeros(n,dim);

G0=3;                                          % gravitational constant
C1=1.3; %C1 in Equation (9)
C2=1.7; %C2 in Equation (9)

Boundary_no = size(up',2);

if Boundary_no==1
    current_position = rand(n,dim).*(up-low)+low; %initial positions in the problem's boundary
end

% If each variable has a different up and low
if Boundary_no>1
    for i=1:dim
        up_i=up(i,1);
        low_i=low(i,1);
       current_position(:,i)=rand(n,1).*(up_i-low_i)+low_i; %initial positions in the problem's boundary
    end
end


velocity = .3*randn(n,dim) ;
acceleration=zeros(n,dim);
mass(n)=0;
force=zeros(n,dim);


%%main loop
iter = 0 ;                  % Iterations? counter
while  ( iter < iteration )

G=G0*exp(-23*iter/iteration); %Equation (4)
iter = iter + 1;
iter;
force=zeros(n,dim);
mass(n)=0;
acceleration=zeros(n,dim);

for i = 1:n
    fitness=0;
    %///Bound the search Space///
    %Tp=current_position(i,:)>up;Tm=current_position(i,:)<low;current_position(i,:)=(current_position(i,:).*(~(Tp+Tm)))+up.*Tp+low.*Tm;                     
    
    Flag4up=current_position(i,:)>up';
    Flag4low=current_position(i,:)<low';
    current_position(i,:)=(current_position(i,:).*(~(Flag4up+Flag4low)))+up'.*Flag4up+low'.*Flag4low; 
    %////////////////////////////
    
                                 %-------------------------------------------%
                                 %         Evaluate the population           %           
                                 %-------------------------------------------%      
    fitness=benchmark_functions(current_position(i,:),Benchmark_Function_ID,dim,X,Y);
    current_fitness(i)=fitness;    
        
    if(pBestScore(i)>fitness)
        pBestScore(i)=fitness;
        pBest(i,:)=current_fitness(i,:);
    end
    if(gBestScore>fitness)
        gBestScore=fitness;
        gBest=current_position(i,:);
    end
    
end

best=min(current_fitness);
worst=max(current_fitness);

        GlobalBestCost(iter)=gBestScore;
        GlobalBestCost(iter);
        best;

    for pp=1:n
        if current_fitness(pp)==best
            break;
        end
        
    end
    
    bestIndex=pp;
            
    for pp=1:dim
        best_fit_position(iter,1)=best;
        best_fit_position(iter,pp+1)=current_position(bestIndex,pp);   
    end


                                               %-------------------%
                                               %   Calculate Mass  %
                                               %-------------------%
    for i=1:n
    mass(i)=(current_fitness(i)-0.99*worst)/(best-worst);    
end

for i=1:n
    mass(i)=mass(i)*5/sum(mass);    
    
end

                                               %-------------------%
                                               %  Force    update  %
                                               %-------------------%

for i=1:n
    for j=1:dim
        for k=1:n
            if(current_position(k,j)~=current_position(i,j))
                % Equation (3)
                force(i,j)=force(i,j)+ rand()*G*mass(k)*mass(i)*(current_position(k,j)-current_position(i,j))/abs(current_position(k,j)-current_position(i,j));
                
            end
        end
    end
end
                                               %------------------------------------%
                                               %  Accelations $ Velocities  UPDATE  %
                                               %------------------------------------%

for i=1:n
       for j=1:dim
            if(mass(i)~=0)
                %Equation (6)
                acceleration(i,j)=force(i,j)/mass(i);
            end
       end
end   

for i=1:n
        for j=1:dim
            %Equation(9)
            velocity(i,j)=rand()*velocity(i,j)+C1*rand()*acceleration(i,j) + C2*rand()*(gBest(j)-current_position(i,j));
        end
end
                                               %--------------------------%
                                               %   positions   UPDATE     %
                                               %--------------------------%
                                                        
%Equation (10) 
current_position = current_position + velocity ;
 
end
end


